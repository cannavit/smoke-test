"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const builder_1 = __importDefault(require("./builder/builder"));
const os = __importStar(require("os"));
const log_1 = __importDefault(require("./log"));
const ping_1 = __importDefault(require("./ping"));
const parserFactory_1 = __importDefault(require("./parser/parserFactory"));
//the initial ping function call
const ping = async (ipAddress, pingOptions) => {
    let logger;
    //create a log file if logToFile option is enabled
    logger = new log_1.default((pingOptions === null || pingOptions === void 0 ? void 0 : pingOptions.logFilePath) || 'log.txt', (pingOptions === null || pingOptions === void 0 ? void 0 : pingOptions.logToFile) || false);
    try {
        const platform = os.platform();
        const builtCommand = builder_1.default(ipAddress, platform, pingOptions);
        logger.writeToLogFile(JSON.stringify(builtCommand));
        const pingOutput = await ping_1.default(builtCommand);
        const parsedOutput = parserFactory_1.default(platform, pingOutput, pingOptions);
        logger.writeToLogFile(JSON.stringify(parsedOutput.output));
        return parsedOutput;
    }
    catch (error) {
        logger.writeToLogFile(error);
        throw error;
    }
};
exports.default = ping;
// For CommonJS default export support
module.exports = ping;
module.exports.default = ping;
