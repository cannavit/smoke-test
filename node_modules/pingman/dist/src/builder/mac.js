"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = require("process");
const messages_1 = require("../messages");
const mac = (ip, options) => {
    let defaultNumberOfEchoes = '4'; //default needed because mac by default has continous ping till we cancel
    let args = [];
    let buildCommand = {
        command: '/sbin/ping',
        arguments: args
    };
    args.push(ip);
    //NO Allowing Unsanitized user input into spawn.Checking each param and assigning
    if (!options) {
        buildCommand.arguments.push('-c', defaultNumberOfEchoes);
        return buildCommand;
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.numberOfEchos) === 'number') {
        args.push('-c', options.numberOfEchos.toString());
    }
    else {
        args.push('-c', defaultNumberOfEchoes);
    }
    if (options === null || options === void 0 ? void 0 : options.soDebugOption) {
        args.push('-d');
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.interval) === 'number') {
        if (options === null || options === void 0 ? void 0 : options.floodPing) {
            args.push('-f');
            process_1.emitWarning(messages_1.ERROR_MESSAGES.FLOOD_AND_INTERVAL_ARGS, 'argumentWarning');
        }
        else {
            args.push('-i', options === null || options === void 0 ? void 0 : options.interval.toString());
        }
    }
    if (options === null || options === void 0 ? void 0 : options.floodPing) {
        if (typeof (options === null || options === void 0 ? void 0 : options.interval) === 'number') {
            args.push('-i', options === null || options === void 0 ? void 0 : options.interval.toString());
        }
        else {
            args.push('-f');
            process_1.emitWarning(messages_1.ERROR_MESSAGES.FLOOD_AND_INTERVAL_ARGS, 'argumentWarning');
        }
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.interfaceAddress) === 'string') {
        args.push('-I', options.interfaceAddress);
    }
    if (options === null || options === void 0 ? void 0 : options.suppressLoopback) {
        args.push('-L');
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.TTL) === 'number') {
        args.push('-m', options.TTL.toString()); //change to -t for linux
    }
    if (options.doNotFragment) {
        args.push('-D');
    }
    if (options === null || options === void 0 ? void 0 : options.numeric) {
        args.push('-n');
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.pattern) === 'string') {
        args.push('-p', options.pattern);
    }
    if (options === null || options === void 0 ? void 0 : options.quiet) {
        args.push('-q');
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.srcAddr) === 'string') {
        args.push('-S', options.srcAddr); //Delete for Linux
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.bufferSize) === 'number') {
        args.push('-s', options.bufferSize.toString());
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.timeBeforeExit) === 'number') {
        args.push('-t', options.timeBeforeExit.toString()); //change to -w for linux
    }
    if (options === null || options === void 0 ? void 0 : options.verboseOutput) {
        args.push('-v');
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.timeout) === 'number') {
        args.push('-W', (options.timeout * 1000).toString());
    }
    if (options === null || options === void 0 ? void 0 : options.IPV6) {
        buildCommand.command = '/sbin/ping6';
    }
    buildCommand.arguments = args;
    return buildCommand;
};
exports.default = mac;
