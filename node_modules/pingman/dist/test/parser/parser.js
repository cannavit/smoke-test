"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const parserFactory_1 = __importDefault(require("../../src/parser/parserFactory"));
const fs = require('fs');
const readline = require('readline');
const response = __importStar(require("./replies.json"));
//function to read file line by line to mock actual response
async function processLineByLine(path) {
    let text = [];
    const fileStream = fs.createReadStream(path);
    //reading file line by line
    const rl = readline.createInterface({
        input: fileStream,
        output: process.stdout,
        console: false
    });
    for await (const line of rl) {
        // Each line in file will be successively available here as `line`.
        text.push(line + '\n');
    }
    return text;
}
ava_1.default('ouput for windows IPV4 ping', async (t) => {
    let input = await processLineByLine(__dirname + '/samples/windowsIPV4.txt');
    let output = parserFactory_1.default("win32", input);
    t.deepEqual(output, response.windows_ipv4);
});
ava_1.default('ouput for windows IPV6 ping', async (t) => {
    let input = await processLineByLine(__dirname + '/samples/windowsIPV6.txt');
    let output = parserFactory_1.default("win32", input, { IPV6: true });
    t.deepEqual(output, response.windows_ipv6);
});
ava_1.default('ouput for linux IPV4 ping', async (t) => {
    let input = await processLineByLine(__dirname + '/samples/linuxIPV4.txt');
    let output = parserFactory_1.default("linux", input);
    t.deepEqual(output, response.linux_ipv4);
});
ava_1.default('ouput for linux IPV6 ping', async (t) => {
    let input = await processLineByLine(__dirname + '/samples/linuxIPV6.txt');
    let output = parserFactory_1.default("linux", input, { IPV6: true });
    t.deepEqual(output, response.linux_ipv6);
});
ava_1.default('ouput for mac IPV4 ping', async (t) => {
    let input = await processLineByLine(__dirname + '/samples/macIPV4.txt');
    let output = parserFactory_1.default("darwin", input);
    t.deepEqual(output, response.macos_ipv4);
});
//TO-DO - Add a mac ipv6 test
